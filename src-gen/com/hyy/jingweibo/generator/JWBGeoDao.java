package com.hyy.jingweibo.generator;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.hyy.jingweibo.generator.JWBGeo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JWBGEO.
*/
public class JWBGeoDao extends AbstractDao<JWBGeo, Long> {

    public static final String TABLENAME = "JWBGEO";

    /**
     * Properties of entity JWBGeo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Longitude = new Property(1, String.class, "longitude", false, "LONGITUDE");
        public final static Property Latitude = new Property(2, String.class, "latitude", false, "LATITUDE");
        public final static Property City = new Property(3, String.class, "city", false, "CITY");
        public final static Property Province = new Property(4, String.class, "province", false, "PROVINCE");
        public final static Property City_name = new Property(5, String.class, "city_name", false, "CITY_NAME");
        public final static Property Province_name = new Property(6, String.class, "province_name", false, "PROVINCE_NAME");
        public final static Property Address = new Property(7, String.class, "address", false, "ADDRESS");
        public final static Property Pinyin = new Property(8, String.class, "pinyin", false, "PINYIN");
        public final static Property More = new Property(9, String.class, "more", false, "MORE");
    };


    public JWBGeoDao(DaoConfig config) {
        super(config);
    }
    
    public JWBGeoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JWBGEO' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'LONGITUDE' TEXT," + // 1: longitude
                "'LATITUDE' TEXT," + // 2: latitude
                "'CITY' TEXT," + // 3: city
                "'PROVINCE' TEXT," + // 4: province
                "'CITY_NAME' TEXT," + // 5: city_name
                "'PROVINCE_NAME' TEXT," + // 6: province_name
                "'ADDRESS' TEXT," + // 7: address
                "'PINYIN' TEXT," + // 8: pinyin
                "'MORE' TEXT);"); // 9: more
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JWBGEO'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JWBGeo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String longitude = entity.getLongitude();
        if (longitude != null) {
            stmt.bindString(2, longitude);
        }
 
        String latitude = entity.getLatitude();
        if (latitude != null) {
            stmt.bindString(3, latitude);
        }
 
        String city = entity.getCity();
        if (city != null) {
            stmt.bindString(4, city);
        }
 
        String province = entity.getProvince();
        if (province != null) {
            stmt.bindString(5, province);
        }
 
        String city_name = entity.getCity_name();
        if (city_name != null) {
            stmt.bindString(6, city_name);
        }
 
        String province_name = entity.getProvince_name();
        if (province_name != null) {
            stmt.bindString(7, province_name);
        }
 
        String address = entity.getAddress();
        if (address != null) {
            stmt.bindString(8, address);
        }
 
        String pinyin = entity.getPinyin();
        if (pinyin != null) {
            stmt.bindString(9, pinyin);
        }
 
        String more = entity.getMore();
        if (more != null) {
            stmt.bindString(10, more);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public JWBGeo readEntity(Cursor cursor, int offset) {
        JWBGeo entity = new JWBGeo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // longitude
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // latitude
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // city
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // province
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // city_name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // province_name
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // address
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // pinyin
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // more
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JWBGeo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setLongitude(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLatitude(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCity(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProvince(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setCity_name(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setProvince_name(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setAddress(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPinyin(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setMore(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(JWBGeo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(JWBGeo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
