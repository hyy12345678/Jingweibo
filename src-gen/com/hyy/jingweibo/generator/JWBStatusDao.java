package com.hyy.jingweibo.generator;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;

import com.hyy.jingweibo.generator.JWBStatus;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JWBSTATUS.
*/
public class JWBStatusDao extends AbstractDao<JWBStatus, Long> {

    public static final String TABLENAME = "JWBSTATUS";

    /**
     * Properties of entity JWBStatus.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Created_at = new Property(0, String.class, "created_at", false, "CREATED_AT");
        public final static Property Id = new Property(1, Long.class, "id", true, "_id");
        public final static Property Mid = new Property(2, String.class, "mid", false, "MID");
        public final static Property Idstr = new Property(3, String.class, "idstr", false, "IDSTR");
        public final static Property Text = new Property(4, String.class, "text", false, "TEXT");
        public final static Property Source = new Property(5, String.class, "source", false, "SOURCE");
        public final static Property Favorited = new Property(6, Boolean.class, "favorited", false, "FAVORITED");
        public final static Property Truncated = new Property(7, Boolean.class, "truncated", false, "TRUNCATED");
        public final static Property In_reply_to_status_id = new Property(8, String.class, "in_reply_to_status_id", false, "IN_REPLY_TO_STATUS_ID");
        public final static Property In_reply_to_user_id = new Property(9, String.class, "in_reply_to_user_id", false, "IN_REPLY_TO_USER_ID");
        public final static Property In_reply_to_screen_name = new Property(10, String.class, "in_reply_to_screen_name", false, "IN_REPLY_TO_SCREEN_NAME");
        public final static Property Thumbnail_pic = new Property(11, String.class, "thumbnail_pic", false, "THUMBNAIL_PIC");
        public final static Property Bmiddle_pic = new Property(12, String.class, "bmiddle_pic", false, "BMIDDLE_PIC");
        public final static Property Original_pic = new Property(13, String.class, "original_pic", false, "ORIGINAL_PIC");
        public final static Property Status_geo_id = new Property(14, Long.class, "status_geo_id", false, "STATUS_GEO_ID");
        public final static Property Status_user_id = new Property(15, Long.class, "status_user_id", false, "STATUS_USER_ID");
        public final static Property Retweeted_status_id = new Property(16, Long.class, "retweeted_status_id", false, "RETWEETED_STATUS_ID");
        public final static Property Reposts_count = new Property(17, Integer.class, "reposts_count", false, "REPOSTS_COUNT");
        public final static Property Comments_count = new Property(18, Integer.class, "comments_count", false, "COMMENTS_COUNT");
        public final static Property Attitudes_count = new Property(19, Integer.class, "attitudes_count", false, "ATTITUDES_COUNT");
        public final static Property Mlevel = new Property(20, Integer.class, "mlevel", false, "MLEVEL");
        public final static Property Visible = new Property(21, String.class, "visible", false, "VISIBLE");
        public final static Property Pic_urls = new Property(22, String.class, "pic_urls", false, "PIC_URLS");
        public final static Property Received_user_id = new Property(23, String.class, "received_user_id", false, "RECEIVED_USER_ID");
        public final static Property Mills = new Property(24, Long.class, "mills", false, "MILLS");
    };

    private DaoSession daoSession;


    public JWBStatusDao(DaoConfig config) {
        super(config);
    }
    
    public JWBStatusDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JWBSTATUS' (" + //
                "'CREATED_AT' TEXT," + // 0: created_at
                "'_id' INTEGER PRIMARY KEY ," + // 1: id
                "'MID' TEXT," + // 2: mid
                "'IDSTR' TEXT," + // 3: idstr
                "'TEXT' TEXT," + // 4: text
                "'SOURCE' TEXT," + // 5: source
                "'FAVORITED' INTEGER," + // 6: favorited
                "'TRUNCATED' INTEGER," + // 7: truncated
                "'IN_REPLY_TO_STATUS_ID' TEXT," + // 8: in_reply_to_status_id
                "'IN_REPLY_TO_USER_ID' TEXT," + // 9: in_reply_to_user_id
                "'IN_REPLY_TO_SCREEN_NAME' TEXT," + // 10: in_reply_to_screen_name
                "'THUMBNAIL_PIC' TEXT," + // 11: thumbnail_pic
                "'BMIDDLE_PIC' TEXT," + // 12: bmiddle_pic
                "'ORIGINAL_PIC' TEXT," + // 13: original_pic
                "'STATUS_GEO_ID' INTEGER," + // 14: status_geo_id
                "'STATUS_USER_ID' INTEGER," + // 15: status_user_id
                "'RETWEETED_STATUS_ID' INTEGER," + // 16: retweeted_status_id
                "'REPOSTS_COUNT' INTEGER," + // 17: reposts_count
                "'COMMENTS_COUNT' INTEGER," + // 18: comments_count
                "'ATTITUDES_COUNT' INTEGER," + // 19: attitudes_count
                "'MLEVEL' INTEGER," + // 20: mlevel
                "'VISIBLE' TEXT," + // 21: visible
                "'PIC_URLS' TEXT," + // 22: pic_urls
                "'RECEIVED_USER_ID' TEXT," + // 23: received_user_id
                "'MILLS' INTEGER);"); // 24: mills
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JWBSTATUS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JWBStatus entity) {
        stmt.clearBindings();
 
        String created_at = entity.getCreated_at();
        if (created_at != null) {
            stmt.bindString(1, created_at);
        }
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(2, id);
        }
 
        String mid = entity.getMid();
        if (mid != null) {
            stmt.bindString(3, mid);
        }
 
        String idstr = entity.getIdstr();
        if (idstr != null) {
            stmt.bindString(4, idstr);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(5, text);
        }
 
        String source = entity.getSource();
        if (source != null) {
            stmt.bindString(6, source);
        }
 
        Boolean favorited = entity.getFavorited();
        if (favorited != null) {
            stmt.bindLong(7, favorited ? 1l: 0l);
        }
 
        Boolean truncated = entity.getTruncated();
        if (truncated != null) {
            stmt.bindLong(8, truncated ? 1l: 0l);
        }
 
        String in_reply_to_status_id = entity.getIn_reply_to_status_id();
        if (in_reply_to_status_id != null) {
            stmt.bindString(9, in_reply_to_status_id);
        }
 
        String in_reply_to_user_id = entity.getIn_reply_to_user_id();
        if (in_reply_to_user_id != null) {
            stmt.bindString(10, in_reply_to_user_id);
        }
 
        String in_reply_to_screen_name = entity.getIn_reply_to_screen_name();
        if (in_reply_to_screen_name != null) {
            stmt.bindString(11, in_reply_to_screen_name);
        }
 
        String thumbnail_pic = entity.getThumbnail_pic();
        if (thumbnail_pic != null) {
            stmt.bindString(12, thumbnail_pic);
        }
 
        String bmiddle_pic = entity.getBmiddle_pic();
        if (bmiddle_pic != null) {
            stmt.bindString(13, bmiddle_pic);
        }
 
        String original_pic = entity.getOriginal_pic();
        if (original_pic != null) {
            stmt.bindString(14, original_pic);
        }
 
        Long status_geo_id = entity.getStatus_geo_id();
        if (status_geo_id != null) {
            stmt.bindLong(15, status_geo_id);
        }
 
        Long status_user_id = entity.getStatus_user_id();
        if (status_user_id != null) {
            stmt.bindLong(16, status_user_id);
        }
 
        Long retweeted_status_id = entity.getRetweeted_status_id();
        if (retweeted_status_id != null) {
            stmt.bindLong(17, retweeted_status_id);
        }
 
        Integer reposts_count = entity.getReposts_count();
        if (reposts_count != null) {
            stmt.bindLong(18, reposts_count);
        }
 
        Integer comments_count = entity.getComments_count();
        if (comments_count != null) {
            stmt.bindLong(19, comments_count);
        }
 
        Integer attitudes_count = entity.getAttitudes_count();
        if (attitudes_count != null) {
            stmt.bindLong(20, attitudes_count);
        }
 
        Integer mlevel = entity.getMlevel();
        if (mlevel != null) {
            stmt.bindLong(21, mlevel);
        }
 
        String visible = entity.getVisible();
        if (visible != null) {
            stmt.bindString(22, visible);
        }
 
        String pic_urls = entity.getPic_urls();
        if (pic_urls != null) {
            stmt.bindString(23, pic_urls);
        }
 
        String received_user_id = entity.getReceived_user_id();
        if (received_user_id != null) {
            stmt.bindString(24, received_user_id);
        }
 
        Long mills = entity.getMills();
        if (mills != null) {
            stmt.bindLong(25, mills);
        }
    }

    @Override
    protected void attachEntity(JWBStatus entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1);
    }    

    /** @inheritdoc */
    @Override
    public JWBStatus readEntity(Cursor cursor, int offset) {
        JWBStatus entity = new JWBStatus( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // created_at
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // mid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // idstr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // text
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // source
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // favorited
            cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0, // truncated
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // in_reply_to_status_id
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // in_reply_to_user_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // in_reply_to_screen_name
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // thumbnail_pic
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // bmiddle_pic
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // original_pic
            cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14), // status_geo_id
            cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15), // status_user_id
            cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16), // retweeted_status_id
            cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17), // reposts_count
            cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18), // comments_count
            cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19), // attitudes_count
            cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20), // mlevel
            cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21), // visible
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // pic_urls
            cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23), // received_user_id
            cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24) // mills
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JWBStatus entity, int offset) {
        entity.setCreated_at(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setMid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setIdstr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setText(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setSource(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFavorited(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setTruncated(cursor.isNull(offset + 7) ? null : cursor.getShort(offset + 7) != 0);
        entity.setIn_reply_to_status_id(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setIn_reply_to_user_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setIn_reply_to_screen_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setThumbnail_pic(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setBmiddle_pic(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setOriginal_pic(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setStatus_geo_id(cursor.isNull(offset + 14) ? null : cursor.getLong(offset + 14));
        entity.setStatus_user_id(cursor.isNull(offset + 15) ? null : cursor.getLong(offset + 15));
        entity.setRetweeted_status_id(cursor.isNull(offset + 16) ? null : cursor.getLong(offset + 16));
        entity.setReposts_count(cursor.isNull(offset + 17) ? null : cursor.getInt(offset + 17));
        entity.setComments_count(cursor.isNull(offset + 18) ? null : cursor.getInt(offset + 18));
        entity.setAttitudes_count(cursor.isNull(offset + 19) ? null : cursor.getInt(offset + 19));
        entity.setMlevel(cursor.isNull(offset + 20) ? null : cursor.getInt(offset + 20));
        entity.setVisible(cursor.isNull(offset + 21) ? null : cursor.getString(offset + 21));
        entity.setPic_urls(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setReceived_user_id(cursor.isNull(offset + 23) ? null : cursor.getString(offset + 23));
        entity.setMills(cursor.isNull(offset + 24) ? null : cursor.getLong(offset + 24));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(JWBStatus entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(JWBStatus entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getJWBGeoDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getJWBUserDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T2", daoSession.getJWBStatusDao().getAllColumns());
            builder.append(" FROM JWBSTATUS T");
            builder.append(" LEFT JOIN JWBGEO T0 ON T.'STATUS_GEO_ID'=T0.'_id'");
            builder.append(" LEFT JOIN JWBUSER T1 ON T.'STATUS_USER_ID'=T1.'_id'");
            builder.append(" LEFT JOIN JWBSTATUS T2 ON T.'RETWEETED_STATUS_ID'=T2.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected JWBStatus loadCurrentDeep(Cursor cursor, boolean lock) {
        JWBStatus entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        JWBGeo jWBGeo = loadCurrentOther(daoSession.getJWBGeoDao(), cursor, offset);
        entity.setJWBGeo(jWBGeo);
        offset += daoSession.getJWBGeoDao().getAllColumns().length;

        JWBUser jWBUser = loadCurrentOther(daoSession.getJWBUserDao(), cursor, offset);
        entity.setJWBUser(jWBUser);
        offset += daoSession.getJWBUserDao().getAllColumns().length;

        JWBStatus jWBStatus = loadCurrentOther(daoSession.getJWBStatusDao(), cursor, offset);
        entity.setJWBStatus(jWBStatus);

        return entity;    
    }

    public JWBStatus loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<JWBStatus> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<JWBStatus> list = new ArrayList<JWBStatus>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<JWBStatus> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<JWBStatus> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
